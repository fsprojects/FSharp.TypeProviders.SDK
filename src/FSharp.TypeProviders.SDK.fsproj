<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\netfx.props" />
  <PropertyGroup>
    <TargetFrameworks>net45; netstandard2.0</TargetFrameworks>
    <OutputType>Library</OutputType>
    <DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <Authors>FSharp.TypeProviders.SDK contributors</Authors>
    <PackageLicenseUrl>http://github.com/fsprojects/FSharp.TypeProviders.SDK/blob/master/LICENSE.md</PackageLicenseUrl>
    <PackageProjectUrl>http://github.com/fsprojects/FSharp.TypeProviders.SDK</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/fsprojects/FSharp.TypeProviders.SDK/master/docs/files/img/logo.png</PackageIconUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>The core implementation of an F# type provider</Description>
    <Copyright>Copyright 2020 FSharp.TypeProviders.SDK contributors</Copyright>
    <tags>F# fsharp typeprovider</tags>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="ProvidedTypes.fsi" />
    <Compile Include="ProvidedTypes.fs" />

    <!-- We only force the use of the F# 3.1 FSharp.Core to make sure this library continues to compile with F# 3.1. -->
    <!-- Yes, people are still making type providers that need to load into F# 3.1 tooling (VS2013). -->
    <PackageReference Include="FSharp.Core" Version="3.1.2.5" Condition="'$(TargetFramework)' == 'net45'" />
    <PackageReference Include="FSharp.Core" Version="4.2.*" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
  </ItemGroup>
</Project>